/****************************author:jisan****************************purpose:safe localStorage mongodb*Include : CURD operation*C:create*U:update*R:query*D:delete_one****************************v 1.0.0*date 17-1-2023*require: vanilla js*/const genRanHex = (size,array) => {const genaret = [...Array(size)].map(() => Math.floor(Math.random() * 16).toString(16)).join('');const ids = array.map(e => e._id);if (ids.includes(genaret)) {genRanHex(size,array);}else{return genaret;}};const matchObject = (object1,object2)=>{let props = [];for (let prop in object1) {props.push(object1[prop]===object2[prop]);}return !props.includes(false);};class Mongo{constructor(token){this.token = token;this.object = {};if (!localStorage.getItem(token)) {localStorage.setItem(token,JSON.stringify(this.object));}}create(name){return new ManageDb(name,true,this.token);}}class ManageDb{constructor(dbName,index,token){this.dbName = dbName;this.token = token;this.index = index;this.getdb = () => JSON.parse(localStorage.getItem(token));this.commit = (db) => {localStorage.setItem(token,JSON.stringify(db))};this.drop=()=>{if (this.getdb()[dbName]) {const db = this.getdb();delete db[dbName];this.commit(db);}};if(!this.getdb()[dbName]) {const db = this.getdb();db[dbName]=[];this.commit(db);}}insert_one(object){ if(this.index) {const db = this.getdb();const primeArray = db[this.dbName];const _index = primeArray[primeArray.length-1]?._index?primeArray[primeArray.length-1]['_index']+1:1;const _id = genRanHex(20,primeArray);object._id=_id;object._index=_index;primeArray.push(object);this.commit(db);return {_id:_id,_index:_index};}}insert_many(array){return array.map((object)=>{return this.insert_one(object);});}delete_one(query){let prime = this.getdb();let arr = prime[this.dbName];const item = arr.find((e)=>{return matchObject(query,e);});let removed = arr.splice(arr.indexOf(item),1);arr.sort();prime[this.dbName]=arr;this.commit(prime);return removed;}delete_many(queries){return queries.map(e => this.delete_one(e));}query_all(){return this.getdb()[this.dbName];}query_by(query){return this.query_all().filter(e => matchObject(query,e));}update(query,newProps){let db = this.getdb();let arr = db[this.dbName];let obj = arr.find(e=>matchObject(query,e));let temp = {...obj};for (let prop in newProps) {temp[prop] = newProps[prop];}arr[arr.indexOf(obj)]=temp;this.commit(db);}}
    // for react
    export default Mongo
    // for webhtml
    //window.Mongo=Mongo
